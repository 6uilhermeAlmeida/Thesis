import org.json.JSONObject
import org.jsontocsv.parser.JSONFlattener
import org.jsontocsv.writer.CSVWriter

apply plugin: 'com.android.library'
apply plugin: 'androidx.benchmark'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath 'com.github.arkni:json-to-csv:-SNAPSHOT'
    }
}

android {
    compileSdkVersion 29

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'androidx.benchmark.junit4.AndroidBenchmarkRunner'
    }

    testBuildType = "debug"

    buildTypes {
        debug {
            // Since debuggable can't be modified by gradle for library modules,
            // it must be done in a manifest - see src/androidTest/AndroidManifest.xml
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'benchmark-proguard-rules.pro'
        }

        release {
        }
    }
}

repositories {
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Add your dependencies here. Note that you cannot benchmark code
    // in an app module this way - you will need to move any code you
    // want to benchmark to a library module:
    // https://developer.android.com/studio/projects/android-library#Convert

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'junit:junit:4.13'
    androidTestImplementation "androidx.benchmark:benchmark-junit4:1.0.0"

    //androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.3'

    implementation project(path: ':kitprotocol')
    implementation project(path: ':coroutineskit')
    implementation project(path: ':rxjavakit')
}

task benchmarkJsonToCsv {

    doFirst {

        // Getting benchmark files available
        // Matching by the format described in the docs
        def expectedBenchmarkPath = "$buildDir/outputs"
        def files = fileTree(expectedBenchmarkPath)
                .matching { include "**/*benchmarkData.json" }
                .getFiles()

        // If no benchmark file is found stop the task
        if (files.isEmpty()) {
            throw new GradleException("No benchmark files found inside $expectedBenchmarkPath")
        }

        // Get the first benchmark file and getting the 'benchmarks' array inside the JSON file
        def benchmarkFile = files.first()
        def strBytes = new String(benchmarkFile.bytes)
        def arrayObject = new JSONObject(strBytes).getJSONArray("benchmarks")

        // If the 'benchmarks' array is empty, stop the task
        if (arrayObject == null || arrayObject.length() < 1) {
            throw new GradleException("Could not find any benchmark data inside the JSON file.")
        }

        def flatArray = JSONFlattener.parse(arrayObject)

        // Writing flatted benchmark data to csv
        def csvFilePath = "$projectDir/results/benchmark.csv"
        CSVWriter.writeToFile(CSVWriter.getCSV(flatArray), csvFilePath)

        println(CSVWriter.getCSV(flatArray))
        println("CSV generated at $csvFilePath")
    }
}

task benchmarkCsvReport {
    dependsOn ':benchmark:connectedCheck', ':benchmark:benchmarkJsonToCsv'
    benchmarkJsonToCsv.mustRunAfter connectedCheck
}
